server:
  port: 8083

spring:
  application:
    name: notification-service
  datasource:
    url: jdbc:postgresql://localhost:5432/notifydb
    username: postgres
    password: akud2200ds
    driver-class-name: org.postgresql.Driver
  jpa:
    hibernate:
      ddl-auto: update
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
  zipkin:
    base-url: http://localhost:9411
  rabbitmq:
    addresses: localhost:5672
  mail:
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
    host: smtp.gmail.com
    port: 587
    username: gamesdealwatch@gmail.com
    password: ${SMTP_PASSWORD}

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka
    fetch-registry: true
    register-with-eureka: true

# Using RabbitMQ Topic Exchange: Topic exchanges route messages to queues based on wildcard matches between the routing key and the routing pattern, which is specified by the queue binding.
# The following information must be specified by message producer (user-account-service/game-list-service) before publishing
rabbitmq:
  exchanges:
    internal: internal.exchange
  queues:
    notification: notification.queue
  routing-keys:
    internal-notification: internal.notification.routing-key

# The consumer (notification-service) indicates which topic it is interested in (internal.exchange). The consumer creates a queue (notification.queue) and sets up a binding (a binding ties together an exchange to a queue because you can have multiple queues for an exchange) with a given routing pattern (routing-key).
# All messages with a routing key that match the routing pattern are routed to the queue and stay there until the consumer consumes the message.